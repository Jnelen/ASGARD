.\" Automatically generated by Pod::Man 2.16 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Chemistry::Ring 3"
.TH Chemistry::Ring 3 "2016-02-11" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Chemistry::Ring \- Represent a ring as a substructure of a molecule
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Chemistry::Ring;
\&    
\&    # already have a molecule in $mol...
\&    # create a ring with the first six atoms in $mol
\&    my $ring = Chemistry::Ring\->new;
\&    $ring\->add_atom($_) for $mol\->atoms(1 .. 6);
\&
\&    # find the centroid
\&    my $vector = $ring\->centroid;
\&
\&    # find the plane that fits the ring
\&    my ($normal, $distance) = $ring\->plane;
\&
\&    # is the ring aromatic?
\&    print "is aromatic!\en" if $ring\->is_aromatic;
\&
\&    # "aromatize" a molecule
\&    Chemistry::Ring::aromatize_mol($mol);
\&
\&    # get the rings involving an atom (after aromatizing)
\&    my $rings = $mol\->atoms(3)\->attr(\*(Aqring/rings\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides some basic methods for representing a ring. A ring is
a subclass of molecule, because it has atoms and bonds. Besides that, it
has some useful geometric methods for finding the centroid and the ring plane,
and methods for aromaticity detection.
.PP
This module does not detect the rings by itself; for that, look at 
Chemistry::Ring::Find.
.PP
This module is part of the PerlMol project, <http://www.perlmol.org/>.
.SH "METHODS"
.IX Header "METHODS"
.IP "Chemistry::Ring\->new(name => value, ...)" 4
.IX Item "Chemistry::Ring->new(name => value, ...)"
Create a new Ring object with the specified attributes. Same as
\&\f(CW\*(C`Chemistry::Mol\->new\*(C'\fR.
.ie n .IP "$ring\->centroid" 4
.el .IP "\f(CW$ring\fR\->centroid" 4
.IX Item "$ring->centroid"
Returs a vector with the centroid, defined as the average of the coordinates
of all the atoms in the ring. The vecotr is a Math::VectorReal object.
.ie n .IP "my ($norm, $d\fR) = \f(CW$ring\->plane" 4
.el .IP "my ($norm, \f(CW$d\fR) = \f(CW$ring\fR\->plane" 4
.IX Item "my ($norm, $d) = $ring->plane"
Returns the normal and distance to the origin that define the plane that best
fits the atoms in the ring, by using multivariate regression. The normal 
vector is a Math::VectorReal object.
.ie n .IP "$ring\->is_aromatic" 4
.el .IP "\f(CW$ring\fR\->is_aromatic" 4
.IX Item "$ring->is_aromatic"
Naively guess whether ring is aromatic from the molecular graph, with a method
based on Hu\*:ckel's rule. This method is not very accurate, but works for simple
molecules. Returns true or false.
.SH "EXPORTABLE SUBROUTINES"
.IX Header "EXPORTABLE SUBROUTINES"
Nothing is exported by default, but you can export these subroutines
explicitly, or all of them by using the ':all' tag.
.IP "aromatize_mol($mol)" 4
.IX Item "aromatize_mol($mol)"
Finds all the aromatic rings in the molecule and marks all the atoms and bonds
in those rings as aromatic.
.Sp
It also adds the 'ring/rings' attribute to the molecule and to all ring atoms
and bonds; this attribute is an array reference containing the list of rings
that involve that atom or bond (or all the rings in the case of the molecule).
\&\s-1NOTE\s0 (the ring/rings attribute is experimental and might change in future
versions).
.SH "VERSION"
.IX Header "VERSION"
0.19
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Chemistry::Mol, Chemistry::Atom, Chemistry::Ring::Find, 
Math::VectorReal.
.SH "AUTHOR"
.IX Header "AUTHOR"
Ivan Tubert-Brohman <itub@cpan.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2005 Ivan Tubert-Brohman. All rights reserved. This program is
free software; you can redistribute it and/or modify it under the same terms as
Perl itself.
