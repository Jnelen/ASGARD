.\" Automatically generated by Pod::Man 2.16 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MOK 1"
.TH MOK 1 "2016-02-11" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
mok \- an awk for molecules
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    mok [OPTION]...  \*(AqCODE\*(Aq FILE...
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The purpose of mok is to read all the molecules found in the files that are
given in the command line, and for each molecule execute the \s-1CODE\s0 that is
given. The \s-1CODE\s0 is given in Perl and it has at its disposal all of the methods
of the PerlMol toolkit.
.PP
This mini-language is intended to provide a powerful environment for writing
\&\*(L"molecular one-liners\*(R" for extracting and munging chemical information.  It was
inspired by the \s-1AWK\s0 programming language by Aho, Kernighan, and Weinberger,
the \s-1SMARTS\s0 molecular pattern description language by Daylight, Inc., and the
Perl programming language by Larry Wall.
.PP
Mok takes its name from Ookla the Mok, an unforgettable character from the
animated \s-1TV\s0 series \*(L"Thundarr the Barbarian\*(R", and from shortening \*(L"molecular
awk\*(R".  For more details about the Mok mini-language, see \s-1LANGUAGE\s0 \s-1SPECIFICATION\s0
below.
.PP
Mok is part of the PerlMol project, <http://www.perlmol.org>.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\-3" 4
.IX Item "-3"
Generate 3D coordinates using Chemistry::3DBuilder.
.IP "\-a" 4
.IX Item "-a"
\&\*(L"Aromatize\*(R" each molecule as it is read. This is needed for example for
matching \s-1SMARTS\s0 patterns that use aromaticity or ring primitives.
.IP "\-b" 4
.IX Item "-b"
Find bonds. Use it when reading files with no bond information but 3D
coordinates to detect the bonds if needed (for example, if you want to do match
a pattern that includes bonds). If the file has explicit bonds, mok will not
try to find the bonds, but it will reassign the bond orders from scratch.
.IP "\-c \s-1CLASS\s0" 4
.IX Item "-c CLASS"
Use \s-1CLASS\s0 instead of Chemistry::Mol to read molecules
.IP "\-d" 4
.IX Item "-d"
Delete dummy atoms after reading each molecule. A dummy atom is defined as an
atom with an unknown symbol (i.e., it doesn't appear on the periodic table), or
an atomic number of zero.
.IP "\-D" 4
.IX Item "-D"
Print debugging information, such as the way the input program was tokenized
and parsed into blocks and subs. This may be useful for diagnosing syntax
errors when the default error mesage is not informative enough.
.IP "\-f \s-1FILE\s0" 4
.IX Item "-f FILE"
Run the code from \s-1FILE\s0 instead of the command line
.IP "\-h" 4
.IX Item "-h"
Print usage information and exit
.IP "\-p \s-1TYPE\s0" 4
.IX Item "-p TYPE"
Parse patterns using the specified \s-1TYPE\s0. Default: 'smarts'. Other options are
\&'smiles' and 'midas'.
.IP "\-t \s-1TYPE\s0" 4
.IX Item "-t TYPE"
Assume that every file has the specified \s-1TYPE\s0. Available types depend on
which Chemistry::File modules are installed, but currently available types
include mdl, sdf, smiles, formula, mopac, pdb.
.SH "LANGUAGE SPECIFICATION"
.IX Header "LANGUAGE SPECIFICATION"
A Mok script consists of a sequence of pattern-action statements and
optional subroutine definitions, in a manner very similar to the \s-1AWK\s0
language.
.PP
.Vb 6
\&    pattern_type:/pattern/options { action statements }
\&    { action statements }
\&    sub name { statements }
\&    BEGIN { statements }
\&    END { statements }
\&    # comment
.Ve
.PP
When the whole program consists of one unconditional action block, the braces
may be omitted.
.PP
Program execution is as follows:
.PP
1) The \s-1BEGIN\s0 block is executed as soon as it's compiled, before any other
actions are taken.
.PP
2) For each molecule in the files given in the command line, each pattern is 
applied in turn; if the pattern matches, the corresponding statement block
is executed. The pattern is optional; statement blocks without a pattern are
executed unconditionally. Subroutines are only executed when called explicitly.
.PP
3) Finally, the \s-1END\s0 block is executed.
.PP
The statements are evaluated as Perl statements in the
Chemistry::Mok::UserCode::Default package. The following chemistry modules are
conveniently loaded by default:
.PP
.Vb 9
\&    Chemistry::Mol;
\&    Chemistry::Atom \*(Aq:all\*(Aq;
\&    Chemistry::Bond;
\&    Chemistry::Pattern;
\&    Chemistry::Pattern::Atom;
\&    Chemistry::Pattern::Bond;
\&    Chemistry::File;
\&    Chemistry::File::*;
\&    Math::VectorReal \*(Aq:all\*(Aq;
.Ve
.PP
Besides these, there is one more function available for convenience:
\&\f(CW\*(C`println\*(C'\fR, which is defined by \f(CW\*(C`sub println { print "\e@_", "\en" }\*(C'\fR.
.Sh "Pattern Specification"
.IX Subsection "Pattern Specification"
The pattern must be a \s-1SMARTS\s0 string readable by the Chemistry::File::SMARTS
module, unless a different type is specified by means of the \-p option or a
pattern_type is given explicitly before the pattern itself. The pattern is
given within slashes, in a way reminiscent of \s-1AWK\s0 and Perl regular expressions.
As in Perl, certain one-letter options may be included after the closing slash.
An option is turned on by giving the corresponing lowercase letter and turned
off by giving the corresponding uppercase letter.
.IP "g/G" 4
.IX Item "g/G"
Match globally (default: off). When not present, the Mok interpreter only
matches a molecule once; when present, it tries matching again in other parts
of the molecule. For example, /C/ matches butane only once (at an unspecified
atom), while /C/g matches four times (once at each atom).
.IP "o/O" 4
.IX Item "o/O"
Overlap (default: on). When set and matching globally, matches may overlap. For
example, /CC/go pattern could match twice on propane, but /CC/gO would match
only once.
.IP "p/P" 4
.IX Item "p/P"
Permute (default: off). Sometimes there is more than one way of matching the
same set of pattern atoms on the same set of molecule atoms. If true, return
these \*(L"redundant\*(R" matches.  For example, /CC/gp could match ethane with
two different permutations (forwards and backwards).
.Sh "Special Variables"
.IX Subsection "Special Variables"
When blocks with action statements are executed, some variables are defined
automatically. The variables are local, so you can do whatever you want with
them with no side effects. However, the objects themselves may be altered by
using their methods.
.PP
\&\s-1NOTE:\s0 Mok 0.10 defined \f(CW$file\fR, \f(CW$mol\fR, \f(CW$match\fR, and \f(CW$patt\fR in lowercase. While they
still work, the lowercase variables are deprecated and may be removed in the
future.
.ie n .IP "$FILE" 4
.el .IP "\f(CW$FILE\fR" 4
.IX Item "$FILE"
The current filename.
.ie n .IP "$MOL" 4
.el .IP "\f(CW$MOL\fR" 4
.IX Item "$MOL"
A reference to the current molecule as a Chemistry::Mol object.
.ie n .IP "$MATCH" 4
.el .IP "\f(CW$MATCH\fR" 4
.IX Item "$MATCH"
A reference to the current match as a Chemistry::Pattern object.
.ie n .IP "$PATT" 4
.el .IP "\f(CW$PATT\fR" 4
.IX Item "$PATT"
The current pattern as a string.
.ie n .IP "$FH" 4
.el .IP "\f(CW$FH\fR" 4
.IX Item "$FH"
The current input filehandle. This provides low-level access in case you want
to rewind or seek into the file, tell the current position, etc. Playing with
\&\f(CW$FH\fR may break things if you are not careful. Use at your own risk!
.ie n .IP "@A" 4
.el .IP "\f(CW@A\fR" 4
.IX Item "@A"
The atoms that were matched. It is defined as \f(CW@A\fR = \f(CW$MATCH\fR\->atom_map if a
pattern was used, or \f(CW@A\fR = \f(CW$MOL\fR\->atoms within an unconditional block.  Remember
that this is a Perl array, so it is zero-based, unlike the one-based numbering
used by most file types and some PerlMol methods.
.ie n .IP "@B" 4
.el .IP "\f(CW@B\fR" 4
.IX Item "@B"
The bonds that were matched. It is defined as \f(CW@A\fR = \f(CW$MATCH\fR\->bond_map if a
pattern was used, or \f(CW@A\fR = \f(CW$MOL\fR\->bonds within an unconditional block.  Remember
Remember that this is a Perl array, so it is zero-based, unlike the one-based
numbering used by most file types and some PerlMol methods.
.Sh "Special Blocks"
.IX Subsection "Special Blocks"
Within action blocks, the following block names can be used with Perl 
funcions such as \f(CW\*(C`next\*(C'\fR and \f(CW\*(C`last\*(C'\fR:
.IP "\s-1MATCH\s0" 4
.IX Item "MATCH"
.PD 0
.IP "\s-1BLOCK\s0" 4
.IX Item "BLOCK"
.IP "\s-1MOL\s0" 4
.IX Item "MOL"
.IP "\s-1FILE\s0" 4
.IX Item "FILE"
.PD
.SH "EXAMPLES"
.IX Header "EXAMPLES"
Print the names of all the molecules found in all the .sdf files in the 
current directory:
.PP
.Vb 1
\&    mok \*(Aqprintln $MOL\->name\*(Aq *.sdf
.Ve
.PP
Find esters among *.mol; print the filename, molecule name, and formula:
.PP
.Vb 2
\&    mok \*(Aq/C(=O)OC/{ printf "$FILE: %s (%s)\en", 
\&        $MOL\->name, $MOL\->formula }\*(Aq *.mol
.Ve
.PP
Find out the total number of atoms:
.PP
.Vb 1
\&    mok \*(Aq{ $n += $MOL\->atoms } END { print "Total: $n atoms\en" }\*(Aq *.mol
.Ve
.PP
Find out the average C\-S bond length:
.PP
.Vb 2
\&    mok \*(Aq/CS/g{ $n++; $len += $B[0]\->length }
\&        END { printf "Average C\-S bond length: %.3f\en", $len/$n; }\*(Aq *.mol
.Ve
.PP
Convert \s-1PDB\s0 files to \s-1MDL\s0 molfiles:
.PP
.Vb 1
\&    mok \*(Aq{ $FILE =~ s/pdb/mol/; $MOL\->write($FILE, format => "mdlmol") }\*(Aq *.pdb
.Ve
.PP
Find molecules with a given formula by overriding the formula pattern type
globally (this example requires Chemistry::FormulatPattern):
.PP
.Vb 1
\&    mok \-p formula_pattern \*(Aq/C6H12O6/{ println $MOL\->name }\*(Aq *.sdf
.Ve
.PP
Find molecules with a given formula by overriding the formula pattern type
just for one specific pattern. This can be used when more than one pattern
type is needed in one script.
.PP
.Vb 1
\&    mok \*(Aqformula_pattern:/C6H12O6/{ println $MOL\->name }\*(Aq *.sdf
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIawk\fR\|(1), \fIperl\fR\|(1)
Chemistry::Mok,
Chemistry::Mol, Chemistry::Pattern,
<http://dmoz.org/Arts/Animation/Cartoons/Titles/T/Thundarr_the_Barbarian/>.
.PP
Tubert-Brohman, I. Perl and Chemistry. The Perl Journal 2004\-06 
(<http://www.tpj.com/documents/s=7618/tpj0406/>).
.PP
The PerlMol project site at <http://www.perlmol.org>.
.SH "VERSION"
.IX Header "VERSION"
0.25
.SH "AUTHOR"
.IX Header "AUTHOR"
Ivan Tubert-Brohman <itub@cpan.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2005 Ivan Tubert-Brohman. All rights reserved. This program is
free software; you can redistribute it and/or modify it under the same terms as
Perl itself.
