.\" Automatically generated by Pod::Man 2.16 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Pattern 3"
.TH Pattern 3 "2016-02-11" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Chemistry::Pattern \- Chemical substructure pattern matching
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    use Chemistry::Pattern;
\&    use Chemistry::Mol;
\&    use Chemistry::File::SMILES;
\&
\&    # Create a pattern and a molecule from SMILES strings
\&    my $mol_str = "C1CCCC1C(Cl)=O";
\&    my $patt_str = "C(=O)Cl";
\&    my $mol = Chemistry::Mol\->parse($mol_str, format => \*(Aqsmiles\*(Aq);
\&    my $patt = Chemistry::Pattern\->parse($patt_str, format => \*(Aqsmiles\*(Aq);
\&
\&    # try to match the pattern
\&    while ($patt\->match($mol)) {
\&        @matched_atoms = $patt\->atom_map;
\&        print "Matched: (@matched_atoms)\en";
\&        # should print something like "Matched: (a6 a8 a7)"
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module implements basic pattern matching for molecules.
The Chemistry::Pattern class is a subclass of Chemistry::Mol, so patterns
have all the properties of molecules and can come from reading the same
file formats. Of course there are certain formats (such as \s-1SMARTS\s0)
that are exclusively used to describe patterns.
.PP
To perform a pattern matching operation on a molecule, follow these steps.
.PP
1) Create a pattern object, either by parsing a file or string, or by adding
atoms and bonds by hand by using Chemistry::Mol methods. Note that atoms and 
bonds in a pattern should be Chemistry::Pattern::Atom and 
Chemistry::Patern::Bond objects. Let's assume that the pattern object is 
stored in \f(CW$patt\fR and that the molecule is \f(CW$mol\fR.
.PP
2) Execute the pattern on the molecule by calling \f(CW$patt\fR\->match($mol).
.PP
3) If \f(CW$patt\fR\->\fImatch()\fR returns true, extract the \*(L"map\*(R" that relates the pattern to
the molecule by calling \f(CW$patt\fR\->atom_map or \f(CW$patt\fR\->bond_map. These methods 
return a list of the atoms or bonds in the molecule that are matched by the 
corresponding atoms in the pattern. Thus \f(CW$patt\fR\->\fIatom_map\fR\|(1) would be analogous
to the \f(CW$1\fR special variable used for regular expresion matching. The difference
between Chemistry::Pattern and Perl regular expressions is that atoms and bonds
are always captured.
.PP
4) If more than one match for the molecule is desired, repeat from step (2) 
until \fImatch()\fR returns false.
.SH "METHODS"
.IX Header "METHODS"
.IP "Chemistry::Pattern\->new(name => value, ...)" 4
.IX Item "Chemistry::Pattern->new(name => value, ...)"
Create a new empty pattern. This is just like the Chemistry::Mol constructor,
with one additional option: \*(L"options\*(R", which expects a hash reference (the
options themselves are described under the \fIoptions()\fR method).
.ie n .IP "$pattern\->options(option => value,...)" 4
.el .IP "\f(CW$pattern\fR\->options(option => value,...)" 4
.IX Item "$pattern->options(option => value,...)"
Available options:
.RS 4
.IP "overlap" 4
.IX Item "overlap"
If true, matches may overlap. For example, the \s-1CC\s0 pattern could match twice
on propane if this option is true, but only once if it is false. This option
is true by default.
.IP "permute" 4
.IX Item "permute"
Sometimes there is more than one way of matching the same set of pattern atoms
on the same set of molecule atoms. If true, return these \*(L"redundant\*(R" matches.
For example, the \s-1CC\s0 pattern could match ethane with two different permutations
(forwards and backwards). This option is false by default.
.RE
.RS 4
.RE
.ie n .IP "$patt\->reset" 4
.el .IP "\f(CW$patt\fR\->reset" 4
.IX Item "$patt->reset"
Reset the state of the pattern matching object, so that it begins the next
match from scratch instead of where it left off after the last one.
.ie n .IP "$pattern\->atom_map" 4
.el .IP "\f(CW$pattern\fR\->atom_map" 4
.IX Item "$pattern->atom_map"
Returns the list of atoms that matched the last time \f(CW$pattern\fR\->match was called.
.ie n .IP "$pattern\->bond_map" 4
.el .IP "\f(CW$pattern\fR\->bond_map" 4
.IX Item "$pattern->bond_map"
Returns the list of bonds that matched the last time \f(CW$pattern\fR\->match was called.
.ie n .IP "$pattern\fR\->match($mol, \f(CW%options)" 4
.el .IP "\f(CW$pattern\fR\->match($mol, \f(CW%options\fR)" 4
.IX Item "$pattern->match($mol, %options)"
Returns true if the pattern matches the molecule. If called again for the 
same molecule, continues matching where it left off (in a way similar to global
regular expressions under scalar context). When there are no matches left,
returns false.
.Sp
.Vb 1
\&    $pattern\->match($mol, atom => $atom)
.Ve
.Sp
If atom => \f(CW$atom\fR is given as an option, match will only look for matches that
start at \f(CW$atom\fR (which should be an atom in \f(CW$mol\fR, of course). This is somewhat
analog to anchored regular expressions.
.Sp
To find out which atoms and bonds matched, use the atom_map and bond_map
methods.
.SH "VERSION"
.IX Header "VERSION"
0.26
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Chemistry::Pattern::Atom, Chemistry::Pattern::Bond, Chemistry::Mol,
Chemistry::File, Chemistry::File::SMARTS.
.PP
The PerlMol website <http://www.perlmol.org/>
.SH "AUTHOR"
.IX Header "AUTHOR"
Ivan Tubert-Brohman <itub@cpan.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2005 Ivan Tubert-Brohman. All rights reserved. This program is
free software; you can redistribute it and/or modify it under the same terms as
Perl itself.
