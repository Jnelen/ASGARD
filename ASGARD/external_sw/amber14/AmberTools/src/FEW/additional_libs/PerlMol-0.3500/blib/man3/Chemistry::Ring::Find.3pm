.\" Automatically generated by Pod::Man 2.16 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Chemistry::Ring::Find 3"
.TH Chemistry::Ring::Find 3 "2016-02-11" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Chemistry::Ring::Find \- Find the rings (cycles) in a molecule
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Chemistry::Ring::Find \*(Aq:all\*(Aq;
\&
\&    # find the smallest ring containing $atom
\&    my $ring = find_ring($atom);
\&
\&    # find all the rings containing $bond
\&    my @rings = find_ring($bond, all => 1);
\&
\&    # see below for more options
\&
\&    # find the six 4\-atom rings in cubane
\&    @rings = find_rings($cubane);
\&
\&    # find a cubane SSSR with five rings
\&    @rings = find_rings($cubane, sssr => 1);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Chemistry::Ring::Find module implements a breadth-first ring finding
algorithm, and it can find all rings that contain a given atom or bond, the
Smallest Set of Smallest Rings (\s-1SSSR\s0), or the \*(L"almost \s-1SSSR\s0\*(R", which is an
unambiguous set of rings for cases such as cubane.The algorithms are  based on
ideas from:
.PP
1) Leach, A. R.; Dolata, D. P.; Prout, P. Automated Conformational Analysis and
Structure Generation: Algorithms for Molecular Perception J. Chem. Inf. Comput.
Sci. 1990, 30, 316\-324
.PP
2) Figueras, J. Ring perception using breadth-first search. J. Chem. Inf.
Comput.  Sci. 1996, 36, 986\-991.
.PP
Ref. 2 is only used for find_ring, not for find_rings, because it has been
shown that the overall \s-1SSSR\s0 method in ref 2 has bugs. Ref 1 inspired
find_rings, which depends on find_ring.
.PP
This module is part of the PerlMol project, <http://www.perlmol.org/>.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
These functions may be exported explicitly, or all by using the :all tag, but
nothing is exported by default.
.ie n .IP "find_ring($origin, %opts)" 4
.el .IP "find_ring($origin, \f(CW%opts\fR)" 4
.IX Item "find_ring($origin, %opts)"
Find the smallest ring containg \f(CW$origin\fR, which may be either an atom or a bond.
Returns a Chemistry::Ring object. Options:
.RS 4
.IP "all" 4
.IX Item "all"
If true, find all the rings containing \f(CW$origin\fR. If false, return the first ring
found. Defaults to false. \*(L"All\*(R" is supposed to include only \*(L"simple\*(R" rings,
that is, rings that are not a combination of smaller rings.
.IP "min" 4
.IX Item "min"
Only find rings with a the given minimum size. Defaults to zero.
.IP "max" 4
.IX Item "max"
Only find rings up to the given maximium size. Defaults to unlimited size.
.IP "size" 4
.IX Item "size"
Only find rings with this size. Same as setting min and max to the same size.
Default: unspecified.
.IP "exclude" 4
.IX Item "exclude"
An array reference containing a list of atoms that must \s-1NOT\s0 be present in the
ring. Defaults to the empty list.
.IP "mirror" 4
.IX Item "mirror"
If true, find each ring twice (forwards and backwards). Defaults to false.
.RE
.RS 4
.RE
.ie n .IP "@rings\fR = find_rings($mol, \f(CW%options)" 4
.el .IP "\f(CW@rings\fR = find_rings($mol, \f(CW%options\fR)" 4
.IX Item "@rings = find_rings($mol, %options)"
Find \*(L"all\*(R" the rings in the molecule. In general it return the Smallest Set of
Smallest Rings (\s-1SSSR\s0). However, since it is well known that the \s-1SSSR\s0 is not
unique for molecules such as cubane (where the \s-1SSSR\s0 consists of five
unspecified four-member rings, even if the symmetry of the molecule would
suggest that the six faces of the cube are equivalent), in such cases
find_rings will return a non-ambiguous \*(L"non-smallest\*(R" set of smallest rings,
unless the \*(L"sssr\*(R" option is given. For example,
.Sp
.Vb 2
\&    @rings = find_rings($cubane);
\&    # returns SIX four\-member rings
\&
\&    @rings = find_rings($cubane, sssr => 1);
\&    # returns FIVE four\-member rings (an unspecified subset of
\&    # the six rings above.)
.Ve
.SH "BUGS"
.IX Header "BUGS"
The \*(L"all\*(R" option in find_ring doesn't quite work as expected. It finds all
simple rings and some bridged rings. It never finds fused rings (which is good).
.SH "VERSION"
.IX Header "VERSION"
0.19
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Chemistry::Ring, <http://www.perlmol.org>.
.SH "AUTHOR"
.IX Header "AUTHOR"
Ivan Tubert-Brohman <itub@cpan.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2005 Ivan Tubert-Brohman. All rights reserved. This program is
free software; you can redistribute it and/or modify it under the same terms as
Perl itself.
