.\" Automatically generated by Pod::Man 2.16 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Chemistry::Reaction 3"
.TH Chemistry::Reaction 3 "2016-02-11" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Chemistry::Reaction \- Explicit chemical reactions
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Chemistry::Reaction;
\&    use Chemistry::File::SMILES;
\&
\&    my $s = Chemistry::Pattern\->parse(\*(AqC=CC=C.C=C\*(Aq, format=>\*(Aqsmiles\*(Aq);
\&    my $p = Chemistry::Pattern\->parse(\*(AqC1=CCCCC1\*(Aq, format=>\*(Aqsmiles\*(Aq);
\&    my %m;
\&    for (my $i = 1; $i <= $s\->atoms; $i++) {
\&      $m{$s\->atoms($i)} = $p\->atoms($i);
\&    }
\&    my $r = Chemistry::Reaction\->new($s, $p, \e%m);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This package, along with Chemistry::Pattern, provides an
implementation of explicit chemical reactions.
.PP
An explicit chemical reaction is a representation of the
transformation that takes place in a given chemical reaction. In an
explicit chemical reaction, a substrate molecule is transformed into a
product molecule by breaking existing bonds and creating new bonds
between atoms.
.PP
The representation of an explicit chemical reaction is a molecule in
which the order of a bond before the chemical reaction is
distinguished from the order of the bond after the chemical
reaction. Thus, the breaking of an existing bond is represented by one
of the following before/after pairs:
.PP
.Vb 3
\&  3/2, 2/1, 1/0 (breaking of a single bond or reduce order by one)
\&       3/1, 2/0 (breaking of a double bond or reduce order by two)
\&            3/0 (breaking of a triple bond)
.Ve
.PP
The creation of a new bond is represented by one of the following
before/after pairs:
.PP
.Vb 3
\&  0/1, 1/2, 2/3 (creation of a single bond or increase order by one)
\&       0/2, 1/3 (creation of a double bond or increase order by two)
\&            0/3 (creation of a triple bond)
.Ve
.PP
An explicit chemical reaction \f(CW$react\fR can be forward or reverse applied
once to a molecule \f(CW$mol\fR at the first subgraph of \f(CW$mol\fR found which is
isomorphic to the substrate or product of \f(CW$react:\fR
.PP
.Vb 4
\&    my $subst = $react\->substrate;
\&    if ($subst\->match($mol)) {
\&      $react\->forward($mol, $subst\->atom_map);
\&    }
.Ve
.PP
Also, an explicit chemical reaction \f(CW$react\fR can be forward or reverse
applied once to a molecule \f(CW$mol\fR at each subgraph of \f(CW$mol\fR which is
isomorphic to the substrate or product of \f(CW$react:\fR
.PP
.Vb 10
\&    my $subst = $react\->substrate;
\&    my @products;
\&    while ($subst\->match($mol)) {
\&      my $new_mol = $mol\->clone; # start from a fresh molecule
\&      my @map = $subst\->atom_map;
\&      # translate atom map to the clone
\&      my @m = map { $new_mol\->by_id($_\->id) } @map;
\&      $react\->forward($new_mol, @m);
\&      push @products, $new_mol;
\&    }
.Ve
.PP
Furthermore, an explicit chemical reaction \f(CW$react\fR can be forward or
reverse applied as long as possible to a molecule \f(CW$mol\fR at the first
subgraph of \f(CW$mol\fR found which is isomorphic to the substrate or product
of \f(CW$react:\fR
.PP
.Vb 4
\&    my $subst = $react\->substrate;
\&    while ($subst\->match($mol)) {
\&      $react\->forward($mol, $subst\->atom_map);
\&    }
.Ve
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "Chemistry::Reaction\->new($subst, $prod, \e%map)" 4
.el .IP "Chemistry::Reaction\->new($subst, \f(CW$prod\fR, \e%map)" 4
.IX Item "Chemistry::Reaction->new($subst, $prod, %map)"
Create a new Reaction object that describes the transformation of the
\&\f(CW$subst\fR substrate into the \f(CW$prod\fR product, according to the \f(CW%map\fR mapping
of substrate atoms to product atoms.
.ie n .IP "$react\->substrate" 4
.el .IP "\f(CW$react\fR\->substrate" 4
.IX Item "$react->substrate"
Return a Chemistry::Pattern object that represents the substrate
molecules of the explicit chemical reaction \f(CW$react\fR.
.ie n .IP "$react\->product" 4
.el .IP "\f(CW$react\fR\->product" 4
.IX Item "$react->product"
Return a Chemistry::Pattern object that represents the product
molecules of the explicit chemical reaction \f(CW$react\fR.
.ie n .IP "$react\fR\->forward($mol, \f(CW@map)" 4
.el .IP "\f(CW$react\fR\->forward($mol, \f(CW@map\fR)" 4
.IX Item "$react->forward($mol, @map)"
Forward application of the explicit chemical reaction \f(CW$react\fR to the
molecule \f(CW$mol\fR, according to the mapping \f(CW@map\fR of substrate atoms to
\&\f(CW$mol\fR atoms. The substrate of the explicit chemical reaction \f(CW$react\fR
must be a subgraph of the molecule \f(CW$mol\fR. Return the modified molecule
\&\f(CW$mol\fR.
.ie n .IP "$react\fR\->reverse($mol, \f(CW@map)" 4
.el .IP "\f(CW$react\fR\->reverse($mol, \f(CW@map\fR)" 4
.IX Item "$react->reverse($mol, @map)"
Reverse application of the explicit chemical reaction \f(CW$react\fR to the
molecule \f(CW$mol\fR, according to the mapping \f(CW@map\fR of product atoms to \f(CW$mol\fR
atoms. The product of the explicit chemical reaction \f(CW$react\fR must be a
subgraph of the molecule \f(CW$mol\fR. Return the modified molecule \f(CW$mol\fR.
.SH "VERSION"
.IX Header "VERSION"
0.02
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Chemistry::Mol, Chemistry::Pattern, Chemistry::Tutorial
.PP
Rossello\*', F. and G. Valiente, Analysis of metabolic pathways by graph
transformation, in: Proc. 2nd Int. Conf. Graph Transformation, Lecture
Notes in Computer Science 3256 (2004), pp. 73\-\-85.
.PP
Rossello\*', F. and G. Valiente, Chemical graphs, chemical reaction
graphs, and chemical graph transformation, in: Proc. 2nd Int. Workshop
on Graph-Based Tools, Electronic Notes in Theoretical Computer Science
(2004), in press.
.PP
The PerlMol website <http://www.perlmol.org/>
.SH "AUTHOR"
.IX Header "AUTHOR"
Ivan Tubert-Brohman <itub@cpan.org> and Gabriel Valiente
<valiente@lsi.upc.es>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2004 Ivan Tubert-Brohman and Gabriel Valiente. All
rights reserved. This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.
