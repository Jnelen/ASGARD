.\" Automatically generated by Pod::Man 2.16 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Chemistry::File::SLN 3"
.TH Chemistry::File::SLN 3 "2016-02-11" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Chemistry::File::SLN \- SLN linear notation parser/writer
.SH "SYNOPSYS"
.IX Header "SYNOPSYS"
.Vb 2
\&    #!/usr/bin/perl
\&    use Chemistry::File::SLN;
\&
\&    # parse a SLN string for benzene
\&    my $s = \*(AqC[1]H:CH:CH:CH:CH:CH@1\*(Aq;
\&    my $mol = Chemistry::Mol\->parse($s, format => \*(Aqsln\*(Aq);
\&
\&    # print a SLN string
\&    print $mol\->print(format => \*(Aqsln\*(Aq);
\&
\&    # print a unique (canonical) SLN string
\&    print $mol\->print(format => \*(Aqsln\*(Aq, unique => 1);
\&
\&    # parse a multiline SLN file
\&    my @mols = Chemistry::Mol\->read("file.sln", format => \*(Aqsln\*(Aq);
\&
\&    # write a multiline SLN file
\&    Chemistry::Mol\->write("file.sln", mols => [@mols]);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module parses a \s-1SLN\s0 (Sybyl Line Notation) string. This is a File I/O
driver for the PerlMol project.  <http://www.perlmol.org/>. It registers the
\&'sln' format with Chemistry::Mol, and recognizes filenames ending in '.sln'.
.PP
Optional attributes for atoms, bonds, and molecules are stored as
\&\f(CW$atom\fR\->attr(\*(L"sln/attr\*(R"), \f(CW$bond\fR\->attr(\*(L"sln/attr\*(R"), and \f(CW$mol\fR\->attr(\*(L"sln/attr\*(R"), 
respectively. Boolean attributes are stored with a value of '\s-1TRUE\s0'. That's the
way boolean attributes are recognized when writing, so that they can be written
in the shortened form.
.PP
.Vb 2
\&    $sln_attr\->{backbone} = 1;
\&    # would be ouput as "C[backbone=1]"
\&
\&    $sln_attr\->{backbone} = \*(AqTRUE\*(Aq;
\&    # would be ouput as "C[backbone]"
.Ve
.PP
Also note that attribute names are normalized to lowercase on reading.
.SH "OPTIONS"
.IX Header "OPTIONS"
The following options are available when reading:
.IP "kekulize" 4
.IX Item "kekulize"
Assign bond orders for unsatisfied valences or for aromatic bonds. For example,
benzene read as C[1]H:CH:CH:CH:CH:CH@1 will be converted internally to 
something like C[1]H=CHCH=CHCH=CH@1. This is needed if another format or 
module expects a Kekule representation without an aromatic bond type.
.PP
The following options are available when writing:
.IP "mols" 4
.IX Item "mols"
If this option points to an array of molecules, these molecules will be
written, one per line, as in the example in the \s-1SYNOPSYS\s0.
.IP "aromatic" 4
.IX Item "aromatic"
Detect aromaticity before writing. This will ensure that aromatic bond types
are used instead of alternate single and double bonds.
.IP "unique" 4
.IX Item "unique"
Canonicalize before writing, and produce a unique strucure. \s-1NOTE:\s0 this option
does not guarantee a unique representation for molecules with bracketed
attributes.
.IP "name" 4
.IX Item "name"
Include the name of the molecule ($mol\->name) in the output string.
.IP "coord3d, coords" 4
.IX Item "coord3d, coords"
Include the 3D coordinates of every atom in the molecule in the output string.
\&\f(CW\*(C`coord3d\*(C'\fR and \f(CW\*(C`coords\*(C'\fR may be used interchangeably.
.IP "attr" 4
.IX Item "attr"
Output the atom, bond, and molecule attributes found in \f(CW$mol\fR\->attr(\*(L"sln/attr\*(R"),
etc.
.SH "CAVEATS"
.IX Header "CAVEATS"
This version does not implement the full \s-1SLN\s0 specification. It supports
simple structures and some attributes, but it does not support any of the
following:
.IP "Macro atoms" 4
.IX Item "Macro atoms"
.PD 0
.IP "Pattern matching options" 4
.IX Item "Pattern matching options"
.IP "Markush structures" 4
.IX Item "Markush structures"
.IP "2D Coordinates" 4
.IX Item "2D Coordinates"
.PD
.PP
The \s-1SLN\s0 specification is vague on several points, and I don't have a reference
implementation available, so I had to make several arbitrary decisions. Also,
this version of this module has not been tested exhaustively, so please report
any bugs that you find.
.PP
If the parser doesn't understand a string, it only says \*(L"syntax error\*(R", which
may not be very helpful.
.SH "VERSION"
.IX Header "VERSION"
0.11
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Chemistry::Mol, Chemistry::File, Chemistry::File::SMILES
.PP
The PerlMol website <http://www.perlmol.org/>
.PP
Ash, S.; Cline, M. A.; Homer, R. W.; Hurst, T.; Smith, G. B., \s-1SYBYL\s0 Line
Notation (\s-1SLN\s0): A Versatile Language for Chemical Structure Representation. J.
Chem. Inf. Comput. Sci; 1997; 37(1); 71\-79.  \s-1DOI:\s0 10.1021/ci960109j 
(<http://dx.doi.org/10.1021/ci960109j>)
.SH "AUTHOR"
.IX Header "AUTHOR"
Ivan Tubert-Brohman <itub@cpan.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2004 Ivan Tubert-Brohman. All rights reserved. This program is
free software; you can redistribute it and/or modify it under the same terms as
Perl itself.
