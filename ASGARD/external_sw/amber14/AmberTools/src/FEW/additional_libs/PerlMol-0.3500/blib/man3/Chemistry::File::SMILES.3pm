.\" Automatically generated by Pod::Man 2.16 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SMILES 3"
.TH SMILES 3 "2016-02-11" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Chemistry::File::SMILES \- SMILES linear notation parser/writer
.SH "SYNOPSYS"
.IX Header "SYNOPSYS"
.Vb 2
\&    #!/usr/bin/perl
\&    use Chemistry::File::SMILES;
\&
\&    # parse a SMILES string
\&    my $s = \*(AqC1CC1(=O)[O\-]\*(Aq;
\&    my $mol = Chemistry::Mol\->parse($s, format => \*(Aqsmiles\*(Aq);
\&
\&    # print a SMILES string
\&    print $mol\->print(format => \*(Aqsmiles\*(Aq);
\&
\&    # print a unique (canonical) SMILES string
\&    print $mol\->print(format => \*(Aqsmiles\*(Aq, unique => 1);
\&
\&    # parse a SMILES file
\&    my @mols = Chemistry::Mol\->read("file.smi", format => \*(Aqsmiles\*(Aq);
\&
\&    # write a multiline SMILES file
\&    Chemistry::Mol\->write("file.smi", mols => \e@mols);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module parses a \s-1SMILES\s0 (Simplified Molecular Input Line Entry
Specification) string. This is a File I/O driver for the PerlMol project.
<http://www.perlmol.org/>. It registers the 'smiles' format with
Chemistry::Mol.
.PP
This parser interprets anything after whitespace as the molecule's name;
for example, when the following \s-1SMILES\s0 string is parsed, \f(CW$mol\fR\->name will be
set to \*(L"Methyl chloride\*(R":
.PP
.Vb 1
\&    CCl  Methyl chloride
.Ve
.PP
The name is not included by default on output. However, if the \f(CW\*(C`name\*(C'\fR option
is defined, the name will be included after the \s-1SMILES\s0 string, separated by a
tab.
.PP
.Vb 1
\&    print $mol\->print(format => \*(Aqsmiles\*(Aq, name => 1);
.Ve
.Sh "Multiline \s-1SMILES\s0 and \s-1SMILES\s0 files"
.IX Subsection "Multiline SMILES and SMILES files"
A file or string can contain multiple molecules, one per line.
.PP
.Vb 2
\&    CCl  Methyl chloride
\&    CO   Methanol
.Ve
.PP
Files with the extension '.smi' are assumed to have this format.
.Sh "Atom Mapping Numbers"
.IX Subsection "Atom Mapping Numbers"
As an extension for reaction processing, \s-1SMILES\s0 strings may have atom mapping
numbers, which are introduced after a colon in a bracketed atom. For example,
[C:1]. The mapping number need not be unique. This module reads the mapping
numbers and stores them as the name of the atom ($atom\->name).
.PP
On output, atom names are not included by default. See the \f(CW\*(C`number\*(C'\fR and
\&\f(CW\*(C`auto_number\*(C'\fR options below for ways of including them.
.PP
head1 \s-1OPTIONS\s0
.PP
The following options are supported in addition to the options mentioned for
Chemistry::File, such as \f(CW\*(C`mol_class\*(C'\fR, \f(CW\*(C`format\*(C'\fR, and \f(CW\*(C`fatal\*(C'\fR.
.IP "aromatic" 4
.IX Item "aromatic"
On output, detect aromatic atoms and bonds by means of the Chemistry::Ring
module, and represent the organic aromatic atoms with lowercase symbols.
.IP "unique" 4
.IX Item "unique"
When used on output, canonicalize the structure if it hasn't been canonicalized
already and generate a unique \s-1SMILES\s0 string. This option implies \*(L"aromatic\*(R".
.IP "number" 4
.IX Item "number"
For atoms that have a defined name, print the name as the \*(L"atom number\*(R". For
example, if an ethanol molecule has the name \*(L"42\*(R" for the oxygen atom and the
other atoms have undefined names, the output would be:
.Sp
.Vb 1
\&    CC[OH:42]
.Ve
.IP "auto_number" 4
.IX Item "auto_number"
When used on output, number all the atoms explicitly and sequentially. The
output for ethanol would look something like this:
.Sp
.Vb 1
\&    [CH3:1][CH2:2][OH:3]
.Ve
.IP "name" 4
.IX Item "name"
Include the molecule name on output, as described in the previous section.
.IP "kekulize" 4
.IX Item "kekulize"
When used on input, assign single or double bond orders to \*(L"aromatic\*(R" or
otherwise unspecified bonds (i.e., generate the Kekule structure). If false,
the bond orders will remain single. This option is true by default. This uses
\&\f(CW\*(C`assign_bond_orders\*(C'\fR from the Chemistry::Bond::Find module.
.SH "CAVEATS"
.IX Header "CAVEATS"
Stereochemistry is not supported! Stereochemical descriptors such as @, @@, /,
and \e will be silently ignored on input, and will certainly not be produced on
output.
.PP
Reading branches that start before an atom, such as (\s-1OC\s0)C, which should be
equivalent to C(\s-1OC\s0) and \s-1COC\s0, according to some variants of the \s-1SMILES\s0
specification. Many other tools don't implement this rule either.
.PP
The kekulize option works by increasing the bond orders of atoms that don't
have their usual valences satisfied. This may cause problems if you have atoms
with explicitly low hydrogen counts.
.SH "VERSION"
.IX Header "VERSION"
0.44
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Chemistry::Mol, Chemistry::File
.PP
The \s-1SMILES\s0 Home Page at http://www.daylight.com/dayhtml/smiles/
.PP
The Daylight Theory Manual at 
http://www.daylight.com/dayhtml/doc/theory/theory.smiles.html
.PP
The PerlMol website <http://www.perlmol.org/>
.SH "AUTHOR"
.IX Header "AUTHOR"
Ivan Tubert-Brohman <itub@cpan.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2005 Ivan Tubert-Brohman. All rights reserved. This program is
free software; you can redistribute it and/or modify it under the same terms as
Perl itself.
