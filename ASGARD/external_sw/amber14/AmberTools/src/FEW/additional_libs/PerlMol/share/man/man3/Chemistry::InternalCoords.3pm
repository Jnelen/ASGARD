.\" Automatically generated by Pod::Man 2.16 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "InternalCoords 3"
.TH InternalCoords 3 "2016-02-11" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Chemistry::InternalCoords \- Represent the position of an atom using internal
coordinates and convert it to Cartesian coordinates.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Chemistry::InternalCoords;
\&
\&    # ... have a molecule in $mol
\&    my $atom = $mol\->new_atom;
\&
\&    # create an internal coordinate object for $atom 
\&    # with respect to atoms with indices 4, 3, and 2.
\&    my $ic = Chemistry::InternalCoords\->new(
\&        $atom, 4, 1.1, 3, 109.5, 2, 180.0
\&    );
\&
\&    # can also use atom object references instead of indices
\&    ($atom4, $atom3, $atom2) = $mol\->atoms(4,3,2);
\&    my $ic = Chemistry::InternalCoords\->new(
\&        $atom, $atom4, 1.1, $atom3, 109.5, $atom2, 180.0
\&    );
\&
\&    # calculate the Cartesian coordinates for
\&    # the atom from the internal coordinates
\&    my $vector = $ic\->cartesians;
\&
\&    # calculate and set permanently the Cartesian coordinates
\&    # for the atom from the internal coordinates
\&    my $vector = $ic\->add_cartesians;
\&    # same as $atom\->coords($ic\->cartesians);
\&
\&    # dump as string
\&    print $ic;
\&    # same as print $ic\->stringify;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module implements an object class for representing internal coordinates 
and provides methods for converting them to Cartesian coordinates.
.PP
For generating an internal coordinate representation (aka a Z\-matrix) of a
molecule from its Cartesian coordinates, see the
Chemistry::InternalCoords::Builder module.
.PP
This module is part of the PerlMol project, <http://www.perlmol.org/>.
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "my $ic\fR = Chemistry::InternalCoords\->new($atom, \f(CW$len_ref\fR, \f(CW$len_val\fR, \f(CW$ang_ref\fR, \f(CW$ang_val\fR, \f(CW$dih_ref\fR, \f(CW$dih_val)" 4
.el .IP "my \f(CW$ic\fR = Chemistry::InternalCoords\->new($atom, \f(CW$len_ref\fR, \f(CW$len_val\fR, \f(CW$ang_ref\fR, \f(CW$ang_val\fR, \f(CW$dih_ref\fR, \f(CW$dih_val\fR)" 4
.IX Item "my $ic = Chemistry::InternalCoords->new($atom, $len_ref, $len_val, $ang_ref, $ang_val, $dih_ref, $dih_val)"
Create a new internal coordinate object. \f(CW$atom\fR is the atom to which the
coordinates apply. \f(CW$len_ref\fR, \f(CW$ang_ref\fR, and \f(CW$dih_ref\fR are either atom references
or atom indices and are used to specify the distance, angle, and dihedral that
are used to define the current position. \f(CW$len_val\fR, \f(CW$ang_val\fR, and \f(CW$dih_val\fR are
the values of the distance, angle, and dihedral. The angle and the dihedral are
expected to be in degrees.
.Sp
For example,
.Sp
.Vb 3
\&    my $ic = Chemistry::InternalCoords\->new(
\&        $atom, 4, 1.1, 3, 109.5, 2, 180.0
\&    );
.Ve
.Sp
means that \f(CW$atom\fR is 1.1 distance units from atom 4, the angle \f(CW$atom\fR\-4\-3 is
109.5 degrees, and the dihedral \f(CW$atom\fR\-4\-3\-2 is 180.0 degrees.
.Sp
The first three atoms in the molecule don't need all the internal coordinates:
the first atom doesn't need anything (except for the atom reference \f(CW$atom\fR) 
because it will always be placed at the origin; the second atom only needs
a distance, and it will be placed on the X axis; the third atom needs a 
distance and an angle, and it will be placed on the \s-1XY\s0 plane.
.ie n .IP "my ($atom, $distance\fR) = \f(CW$ic\->distance" 4
.el .IP "my ($atom, \f(CW$distance\fR) = \f(CW$ic\fR\->distance" 4
.IX Item "my ($atom, $distance) = $ic->distance"
Return the atom reference and distance value contained in the
Chemistry::InternalCoords object.
.ie n .IP "my ($atom, $angle\fR) = \f(CW$ic\->angle" 4
.el .IP "my ($atom, \f(CW$angle\fR) = \f(CW$ic\fR\->angle" 4
.IX Item "my ($atom, $angle) = $ic->angle"
Return the atom reference and angle value contained in the
Chemistry::InternalCoords object.
.ie n .IP "my ($atom, $dihedral\fR) = \f(CW$ic\->dihedral" 4
.el .IP "my ($atom, \f(CW$dihedral\fR) = \f(CW$ic\fR\->dihedral" 4
.IX Item "my ($atom, $dihedral) = $ic->dihedral"
Return the atom reference and dihedral value contained in the
Chemistry::InternalCoords object.
.ie n .IP "my $vector\fR = \f(CW$ic\->cartesians" 4
.el .IP "my \f(CW$vector\fR = \f(CW$ic\fR\->cartesians" 4
.IX Item "my $vector = $ic->cartesians"
Calculate the Cartesian coordinates from an internal coordinate object.
Returns a Math::VectorReal object. Note that the Cartesian coordinates of the
atoms referenced by the \f(CW$ic\fR object should already be calculated.
.ie n .IP "my $vector\fR = \f(CW$ic\->add_cartesians" 4
.el .IP "my \f(CW$vector\fR = \f(CW$ic\fR\->add_cartesians" 4
.IX Item "my $vector = $ic->add_cartesians"
Same as \f(CW$ic\fR\->cartesians, but also adds the newly calculated Cartesian
coordinates to the atom. It is just shorthand for the following:
.Sp
.Vb 1
\&    $atom\->coords($ic\->cartesians);
.Ve
.Sp
The best way of calculating the Cartesian coordinates for an entire molecule,
assuming that every atom is defined only in terms of previous atoms (as it 
should be), is the following:
.Sp
.Vb 4
\&    # we have all the internal coords in @ics
\&    for my $ic (@ics) {
\&        $ic\->add_cartesians;
\&    }
.Ve
.ie n .IP "my $string\fR = \f(CW$ic\->stringify" 4
.el .IP "my \f(CW$string\fR = \f(CW$ic\fR\->stringify" 4
.IX Item "my $string = $ic->stringify"
Dump the object as a string representation. May be useful for debugging.
This method overloads the "" operator.
.SH "VERSION"
.IX Header "VERSION"
0.18
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Chemistry::InternalCoords::Builder,
Chemistry::Mol, Chemistry::Atom, 
Math::VectorReal, <http://www.perlmol.org/>.
.SH "AUTHOR"
.IX Header "AUTHOR"
Ivan Tubert-Brohman <itub@cpan.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2004 Ivan Tubert-Brohman. All rights reserved. This program is
free software; you can redistribute it and/or modify it under the same terms as
Perl itself.
