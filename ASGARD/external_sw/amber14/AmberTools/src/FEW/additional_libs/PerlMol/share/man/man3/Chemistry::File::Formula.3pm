.\" Automatically generated by Pod::Man 2.16 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "File::Formula 3"
.TH File::Formula 3 "2016-02-11" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Chemistry::File::Formula \- Molecular formula reader/formatter
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Chemistry::File::Formula;
\&
\&    my $mol = Chemistry::Mol\->parse("H2O");
\&    print $mol\->print(format => formula);
\&    print $mol\->formula;    # this is a shorthand for the above 
\&    print $mol\->print(format => formula, 
\&        formula_format => "%s%d{<sub>%d</sub>});
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module converts a molecule object to a string with the formula. It
registers the 'formula' format with Chemistry::Mol.
Besides its obvious use, it is included in the Chemistry::Mol distribution
because it is a very simple example of a Chemistry::File derived I/O module.
.PP
The format can be specified as a printf-like string with the following control
sequences, which are specified with the formula_format parameter to \f(CW$mol\fR\->print
or \f(CW$mol\fR\->write.
.ie n .IP "%s  symbol" 4
.el .IP "\f(CW%s\fR  symbol" 4
.IX Item "%s  symbol"
.PD 0
.ie n .IP "%D  number of atoms" 4
.el .IP "\f(CW%D\fR  number of atoms" 4
.IX Item "%D  number of atoms"
.ie n .IP "%d  number of atoms, included only when it is greater than one" 4
.el .IP "\f(CW%d\fR  number of atoms, included only when it is greater than one" 4
.IX Item "%d  number of atoms, included only when it is greater than one"
.ie n .IP "%d{substr}  substr is only included when number of atoms is greater than one" 4
.el .IP "\f(CW%d\fR{substr}  substr is only included when number of atoms is greater than one" 4
.IX Item "%d{substr}  substr is only included when number of atoms is greater than one"
.ie n .IP "%j{substr}  substr is inserted between the formatted string for each element. (The 'j' stands for 'joiner'). The format should have only one joiner, and its location in the string doesn't matter." 4
.el .IP "\f(CW%j\fR{substr}  substr is inserted between the formatted string for each element. (The 'j' stands for 'joiner'). The format should have only one joiner, and its location in the string doesn't matter." 4
.IX Item "%j{substr}  substr is inserted between the formatted string for each element. (The 'j' stands for 'joiner'). The format should have only one joiner, and its location in the string doesn't matter."
.IP "%% a percent sign" 4
.IX Item "%% a percent sign"
.PD
.PP
If no format is specified, the default is \*(L"%s%d\*(R". Some examples follow. Let's
assume that the formula is C2H6O, as it would be formatted by default.
.ie n .IP """%s%D""" 4
.el .IP "\f(CW%s%D\fR" 4
.IX Item "%s%D"
Like the default, but include explicit indices for all atoms. 
The formula would be formatted as \*(L"C2H6O1\*(R"
.ie n .IP """%s%d{<sub>%d</sub>}""" 4
.el .IP "\f(CW%s%d{<sub>%d</sub>}\fR" 4
.IX Item "%s%d{<sub>%d</sub>}"
\&\s-1HTML\s0 format. The output would be
\&\*(L"C<sub>2</sub>H<sub>6</sub>O\*(R".
.ie n .IP """%D %s%j{, }""" 4
.el .IP "\f(CW%D %s%j{, }\fR" 4
.IX Item "%D %s%j{, }"
Use a comma followed by a space as a joiner. The output would be 
\&\*(L"2 C, 6 H, 1 O\*(R".
.Sh "Parsing Formulas"
.IX Subsection "Parsing Formulas"
Formulas can also be parsed back into Chemistry::Mol objects.
The formula may have parentheses and square or triangular brackets, and 
it may have the following abbreviations:
.PP
.Vb 7
\&    Me => \*(Aq(CH3)\*(Aq,
\&    Et => \*(Aq(CH3CH2)\*(Aq,
\&    Bu => \*(Aq(C4H9)\*(Aq,
\&    Bn => \*(Aq(C6H5CH2)\*(Aq,
\&    Cp => \*(Aq(C5H5)\*(Aq,
\&    Ph => \*(Aq(C6H5)\*(Aq,
\&    Bz => \*(Aq(C6H5CO)\*(Aq,
.Ve
.PP
The formula may also be preceded by a number, which multiplies the whole
formula. Some examples of valid formulas:
.IP "\s-1CH3\s0(\s-1CH2\s0)3CH3. Equivalent to C5H12." 4
.IX Item "CH3(CH2)3CH3. Equivalent to C5H12."
.PD 0
.IP "C6H3Me3. Equivalent to C9H12." 4
.IX Item "C6H3Me3. Equivalent to C9H12."
.IP "2Cu[\s-1NH3\s0]4(\s-1NO3\s0)2. Equivalent to Cu2H24N12O12." 4
.IX Item "2Cu[NH3]4(NO3)2. Equivalent to Cu2H24N12O12."
.ie n .IP "2C(C[""C""5]4)3. Equivalent to C152 (kind of silly example...)." 4
.el .IP "2C(C[\f(CWC\fR5]4)3. Equivalent to C152 (kind of silly example...)." 4
.IX Item "2C(C[C5]4)3. Equivalent to C152 (kind of silly example...)."
.IP "2C(C(C(C)5)4)3. Equivalent to C152." 4
.IX Item "2C(C(C(C)5)4)3. Equivalent to C152."
.IP "C 1 0 H 2 2. Equivalent to C10H22. Note that whitespace is completely ignored." 4
.IX Item "C 1 0 H 2 2. Equivalent to C10H22. Note that whitespace is completely ignored."
.PD
.PP
When a formula is parsed, a molecule object is created which consists of
the set of the atoms in the formula (no bonds or coordinates, of course).
The atoms are created in alphabetical order, so the molecule object for C2H5Br
would have the atoms in the following sequence: Br, C, C, H, H, H, H, H.
.SH "VERSION"
.IX Header "VERSION"
0.35
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Chemistry::Mol, Chemistry::File
.PP
The PerlMol website <http://www.perlmol.org/>
.SH "AUTHOR"
.IX Header "AUTHOR"
Ivan Tubert-Brohman <itub@cpan.org>.
.PP
Formula parsing code contributed by Brent Gregersen.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2005 Ivan Tubert-Brohman. All rights reserved. This program is
free software; you can redistribute it and/or modify it under the same terms as
Perl itself.
