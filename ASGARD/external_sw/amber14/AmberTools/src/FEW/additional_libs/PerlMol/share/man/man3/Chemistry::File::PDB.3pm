.\" Automatically generated by Pod::Man 2.16 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PDB 3"
.TH PDB 3 "2016-02-11" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Chemistry::File::PDB \- Protein Data Bank file format reader/writer
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Chemistry::File::PDB;
\&
\&    # read a PDB file
\&    my $macro_mol = Chemistry::MacroMol\->read("myfile.pdb");
\&
\&    # write a PDB file
\&    $macro_mol\->write("out.pdb");
\&
\&    # read all models in a multi\-model file
\&    my @mols = Chemistry::MacroMol\->read("models.pdb");
\&
\&    # read one model at a time
\&    my $file = Chemistry::MacroMol\->file("models.pdb");
\&    $file\->open;
\&    while (my $mol = $file\->read_mol($file\->fh)) {
\&        # do something with $mol
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module reads and writes \s-1PDB\s0 files. The \s-1PDB\s0 file format is commonly used to
describe proteins, particularly those stored in the Protein Data Bank
(<http://www.rcsb.org/pdb/>). The current version of this module only uses the
following record types, ignoring everything else:
.PP
.Vb 3
\&    ATOM
\&    HETATM
\&    ENDMDL
.Ve
.PP
This module automatically registers the 'pdb' format with Chemistry::Mol,
so that \s-1PDB\s0 files may be identified and read by Chemistry::Mol\->\fIread()\fR. For 
autodetection purpuses, it assumes that files ending in .pdb or having 
a line matching /^(\s-1ATOM\s0  |HETATM)/ are \s-1PDB\s0 files.
.PP
The \s-1PDB\s0 reader and writer is designed for dealing with Chemistry::MacroMol
objects, but it can also create and use Chemistry::Mol objects by throwing some
information away.
.Sh "Properties"
.IX Subsection "Properties"
When reading and writing files, this module stores or gets some of the
information in the following places:
.ie n .IP "$domain\->type" 4
.el .IP "\f(CW$domain\fR\->type" 4
.IX Item "$domain->type"
The residue type, such as \*(L"\s-1ARG\s0\*(R".
.ie n .IP "$domain\->name" 4
.el .IP "\f(CW$domain\fR\->name" 4
.IX Item "$domain->name"
The type and sequence number, such as \*(L"\s-1ARG114\s0\*(R".
.ie n .IP "$domain\->attr(""pdb/sequence_number"")" 4
.el .IP "\f(CW$domain\fR\->attr(``pdb/sequence_number'')" 4
.IX Item "$domain->attr(pdb/sequence_number)"
The residue sequence number as given in the \s-1PDB\s0 file.
.ie n .IP "$domain\->attr(""pdb/chain_id"")" 4
.el .IP "\f(CW$domain\fR\->attr(``pdb/chain_id'')" 4
.IX Item "$domain->attr(pdb/chain_id)"
The chain to which this residue belongs (one character).
.ie n .IP "$domain\->attr(""pdb/insertion_code"")" 4
.el .IP "\f(CW$domain\fR\->attr(``pdb/insertion_code'')" 4
.IX Item "$domain->attr(pdb/insertion_code)"
The residue insertion code (see the \s-1PDB\s0 specification for details).
.ie n .IP "$atom\->name" 4
.el .IP "\f(CW$atom\fR\->name" 4
.IX Item "$atom->name"
The \s-1PDB\s0 atom name, such as \*(L"\s-1CA\s0\*(R".
.ie n .IP "$atom\->attr(""pdb/residue_name"")" 4
.el .IP "\f(CW$atom\fR\->attr(``pdb/residue_name'')" 4
.IX Item "$atom->attr(pdb/residue_name)"
The name of the residue, as discussed above.
.ie n .IP "$atom\->attr(""pdb/serial_number"")" 4
.el .IP "\f(CW$atom\fR\->attr(``pdb/serial_number'')" 4
.IX Item "$atom->attr(pdb/serial_number)"
The serial number for the atom, as given in the \s-1PDB\s0 file.
.PP
If some of this information is not available when writing a \s-1PDB\s0 file, this 
module tries to make it up (by counting the atoms or residues, for example).
The default residue name for writing is \s-1UNK\s0 (unknown). Atom names are just the
atomic symbols.
.Sh "Multi-model files"
.IX Subsection "Multi-model files"
If a \s-1PDB\s0 file has multiple models (separated by \s-1ENDMDL\s0 records), each call to
read_mol will return one model.
.SH "VERSION"
.IX Header "VERSION"
0.21
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Chemistry::MacroMol, Chemistry::Mol, Chemistry::File,
<http://www.perlmol.org/>.
.PP
The \s-1PDB\s0 format description at 
<http://www.rcsb.org/pdb/docs/format/pdbguide2.2/guide2.2_frame.html>
.PP
There is another \s-1PDB\s0 reader in Perl, as part of the BioPerl project:
Bio::Structure::IO::pdb.
.SH "AUTHOR"
.IX Header "AUTHOR"
Ivan Tubert-Brohman <itub@cpan.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2005 Ivan Tubert-Brohman. All rights reserved. This program is
free software; you can redistribute it and/or modify it under the same terms as
Perl itself.
