.\" Automatically generated by Pod::Man 2.16 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Chemistry::MidasPattern 3"
.TH Chemistry::MidasPattern 3 "2016-02-11" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Chemistry::MidasPattern \- Select atoms in macromolecules
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Chemistry::MidasPattern;
\&    use Chemistry::File::PDB;
\&
\&    # read a molecule
\&    my $mol = Chemistry::MacroMol\->read("test.pdb");
\&
\&    # define a pattern matching carbons alpha and beta
\&    # in all valine residues
\&    my $str  = \*(Aq:VAL@CA,CB\*(Aq;
\&    my $patt = Chemistry::MidasPattern\->new($str);
\&
\&    # apply the pattern to the molecule
\&    $patt\->match($mol);
\&
\&    # extract the results
\&    for my $atom ($patt\->atom_map) {
\&        printf "%s\et%s\en",  $atom\->attr("pdb/residue_name"), $atom\->name;
\&    }
\&    printf "FOUND %d atoms\en", scalar($patt\->atom_map);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module partially implements a pattern matching engine for selecting atoms
in macromolecules by using Midas/Chimera patterns. See
<http://www.cmpharm.ucsf.edu/~troyer/troff2html/midas/Midas\-uh\-3.html#sh\-2.1>
for a detailed description of this language.
.PP
This module shares the same interface as Chemistry::Pattern; to perform a
pattern matching operation on a molecule, follow these steps.
.PP
1) Create a pattern object, by parsing a string. Let's assume that the pattern
object is stored in \f(CW$patt\fR and that the molecule is \f(CW$mol\fR.
.PP
2) Execute the pattern on the molecule by calling \f(CW$patt\fR\->match($mol).
.PP
3) If \f(CW$patt\fR\->\fImatch()\fR returns true, extract the \*(L"map\*(R" that relates the pattern
to the molecule by calling \f(CW$patt\fR\->atom_map. These method returns a list of the
atoms in the molecule that are matched by the pattern. Thus \f(CW$patt\fR\->\fIatom_map\fR\|(1)
would be analogous to the \f(CW$1\fR special variable used for regular expresion
matching. The difference between Chemistry::Pattern and Perl regular
expressions is that atoms are always captured, and that each atom always uses
one \*(L"slot\*(R".
.SH "MIDAS ATOM SPECIFICATION LANGUAGE QUICK SUMMARY"
.IX Header "MIDAS ATOM SPECIFICATION LANGUAGE QUICK SUMMARY"
The current implementation does not have the concept of a model, only of
residues and atoms.
.PP
What follows is not exactly a formal grammar specification, but it should give
a general idea:
.PP
\&\s-1SELECTOR\s0 = ((:RESIDUE(.CHAIN)?)*(@ATOM)*)*
.PP
The star here means \*(L"zero or more\*(R", the question mark means \*(L"zero or one\*(R", and
the parentheses are used to delimit the effect of the star. All other
characters are used verbatim.
.PP
\&\s-1RESIDUE\s0 can be a name (e.g., \s-1LYS\s0), a sequence number (e.g., 108), a range
(e.g., 1\-10), or a comma-separated list of RESIDUEs (e.g. 1\-10,6,LYS).
.PP
\&\s-1ATOM\s0 is an atom name, a serial number (this is a non-standard extension) or a
comma-separated list of ATOMs.
.PP
Names can have wildcards: * matches the whole name; ? matches one character;
and = matches zero or more characters. An \f(CW@ATOM\fR specification is asociated with
the closest preceding residue specification.
.PP
\&\s-1DISTANCE_SELECTOR\s0 = \s-1SELECTOR\s0 za< \s-1DISTANCE\s0
.PP
Atoms within a certain distance of those that are matched by a selector can be
selected by using the za< operator, where \s-1DISTANCE\s0 is a number in Angstroms.
.PP
\&\s-1EXPR\s0 = ( \s-1SELECTOR\s0 | \s-1DISTANCE_SELECTOR\s0 ) (& (\s-1SELECTOR\s0 | \s-1DISTANCE_SELECTOR\s0))*
.PP
The result of two or more selectors can be intersected using the & operator.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.Vb 10
\&    :ARG                All arginine atoms
\&    :ARG.A              All arginine atoms in chain \*(AqA\*(Aq
\&    :ARG@*              All arginine atoms
\&    @CA                 All alpha carbons
\&    :*@CA               All alpha carbons
\&    :ARG@CA             Arginine alpha carbons
\&    :VAL@C=             Valine carbons
\&    :VAL@C?             Valine carbons with two\-letter names
\&    :ARG,VAL@CA         Arginine and valine alpha carbons
\&    :ARG:VAL@CA         All arginine atoms and valine alpha carbons
\&    :ARG@CA,CB          Arginine alpha and beta carbons
\&    :ARG@CA@CB          Arginine alpha and beta carbons
\&    :1\-10               Atoms in residues 1 to 10
\&    :48\-*               Atoms in residues 11 to the last one
\&    :30\-40@CA & :ARG    Alpha carbons in residues 1\-10 which are
\&                        also arginines.
\&    @123                Atom 123
\&    @123 za<5.0         Atoms within 5.0 Angstroms of atom 123
\&    @123 za>30.0        Atoms not within 30.0 Angstroms of atom 123
\&    @CA & @123 za<5.0   Alpha carbons within 5.0 Angstroms of atom 123
.Ve
.SH "CAVEATS"
.IX Header "CAVEATS"
If a feature does not appear in any of the examples, it is probably not
implemented. For example, the zr< zone specifier, atom properties, and 
various Chimera extensions.
.PP
The zone specifiers (selection by distance) currently use a brute-force N^2
algorithm. You can optimize an & expression by putting the most unlikely
selectors first; for example
.PP
.Vb 2
\&    :1\-20 zr<10.0 & :38         atoms in residue 38 within 10 A of atoms
\&                                in residues 1\-20 (slow)
\&
\&    :38 & :1\-20 zr<10.0         atoms in residue 38 within 10 A of atoms
\&                                in residues 1\-20 (not so slow)
.Ve
.PP
In the first case, the N^2 search measures the distance between every atom in
the molecule and every atom in residues 1\-20, and then intersects the results
with the atom list of residue 28; the second case only measures the distance
between every atom in residue 38 with every atom in residues 1\-20. The second
way is much, much faster for large systems.
.PP
Some day, a future version may implement a smarter algorithm...
.SH "VERSION"
.IX Header "VERSION"
0.11
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Chemistry::File::MidasPattern, Chemistry::Pattern
.PP
The PerlMol website <http://www.perlmol.org/>
.SH "AUTHOR"
.IX Header "AUTHOR"
Ivan Tubert <itub@cpan.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2005 Ivan Tubert. All rights reserved. This program is free
software; you can redistribute it and/or modify it under the same terms as
Perl itself.
