.\" Automatically generated by Pod::Man 2.16 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SMARTS 3"
.TH SMARTS 3 "2016-02-11" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Chemistry::File::SMARTS \- SMARTS chemical substructure pattern linear notation parser
.SH "SYNOPSYS"
.IX Header "SYNOPSYS"
.Vb 2
\&    #!/usr/bin/perl
\&    use Chemistry::File::SMARTS;
\&
\&    # this string matches an oxygen next to an atom with three 
\&    # neighbors, one of which is a hydrogen, and a positive charge
\&    my $smarts = \*(AqO[D3H+]\*(Aq; 
\&
\&    # parse a SMARTS string and compile it into a
\&    # Chemistry::Pattern object
\&    my $patt = Chemistry::Pattern\->parse("$smarts", format => \*(Aqsmarts\*(Aq);
\&
\&    # find matches of the pattern in a Chemistry::Mol object $mol
\&    my $mol = Chemistry::Mol\->read("myfile.mol");
\&    while ($patt\->match($mol)) {
\&        print "pattern matches atoms: ", $patt\->atom_map, "\en"
\&    }
\&
\&    # NOTE: if the SMARTS pattern relies on aromaticity or ring
\&    # properties, you have to make sure that the target 
\&    # molecule is "aromatized" first:
\&    my $smarts = \*(Aqc:a\*(Aq;
\&    my $patt = Chemistry::Pattern\->parse("$smarts", format => \*(Aqsmarts\*(Aq);
\&    use Chemistry::Ring \*(Aqaromatize_mol\*(Aq;
\&    aromatize_mol($mol);  # <\-\-\- AROMATIZE!!!
\&    while ($patt\->match($mol)) {
\&        print "pattern matches atoms: ", $patt\->atom_map, "\en"
\&    }
\&
\&    # Note that "atom mapping numbers" end up as $atom\->name
\&    my $patt = Chemistry::Pattern\->parse("[C:7][C:8]", format => \*(Aqsmarts\*(Aq);
\&    print $patt\->atoms(1)\->name;    # prints 7
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module parse a \s-1SMARTS\s0 (SMiles ARbitrary Target Specification) string,
generating a Chemistry::Pattern object.  It is a file I/O driver for the
PerlMol toolkit; it's not called directly but by means of the
Chemistry::Pattern\->parse class method.
.PP
For a detailed description of the \s-1SMARTS\s0 language, see
<http://www.daylight.com/dayhtml/doc/theory/theory.smarts.html>. Note that
this module doesn't implement the full language, as detailed under \s-1CAVEATS\s0.
.PP
This module is part of the PerlMol project, <http://www.perlmol.org/>.
.SH "CAVEATS"
.IX Header "CAVEATS"
The following features are not implemented yet:
.IP "chirality: @, @@" 4
.IX Item "chirality: @, @@"
.PD 0
.IP "component-level gruouping" 4
.IX Item "component-level gruouping"
.PD
That is, the difference between these three cases:
.Sp
.Vb 3
\&    (SMARTS)
\&    (SMARTS).(SMARTS)
\&    (SMARTS).SMARTS
.Ve
.PP
The so-called parser is very lenient, so if you give it something that's not
quite reasonable it will ignore it or interpret it in a strange way without
warning.
.PP
As shown in the synopsis, you have to make sure that the molecule is
\&\*(L"aromatized\*(R" if you want to apply to it a pattern that relies on aromaticity
or ring properties.
.SH "VERSION"
.IX Header "VERSION"
0.22
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Chemistry::Pattern, Chemistry::Mol, Chemistry::File,
Chemistry::File::SMILES.
.PP
For more information about \s-1SMARTS\s0, see the \s-1SMARTS\s0 Theory Manual at
<http://www.daylight.com/dayhtml/doc/theory/theory.smarts.html>
.SH "AUTHOR"
.IX Header "AUTHOR"
Ivan Tubert-Brohman <itub@cpan.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2005 Ivan Tubert-Brohman. All rights reserved. This program is
free software; you can redistribute it and/or modify it under the same terms as
Perl itself.
