September 13, 1994
Jarrod Smith
jsmith@scripps.edu

The following is a short description of a way to get Felix NOESY data from a
Felix database into a format that is usable for structure refinements in
AMBER.  The ideas here are specifically for DNA, but the general approach
should work for proteins as well.

Basically, NMR distance restraint information for AMBER should generally
be made by the program "makeRST" in the src/nmr_aux directory.  However,
neither Felix 2.1 nor 2.3 can directly output the format that makeRST
needs, so these instructions outline how to go from the Felix database
to the makeRST input.  [Eventually, someone will have enough time to make
a better connection, but Felix keeps changing even faster than AMBER --
see the discussion below of diffs between Felix 2.1 and 2.3, for example.]

Since the Felix database allows you to enter one assignment string for each
dimension, it must contain information about both the residue and the atom.
By following the convention that assignments are typed into the name
crosspeaks routine like:

C10:H2P

you can get the residue name and number as well as the atom name all crammed
into one string.  The awk script below (felix2amber.awk) then parses this
information.

File format for this script should look like this: 

 4    3     8.27     2.74  a6:h8             a6:h2p           0.186E+09  1.00                                            
 5    5     8.27     5.67  a6:h8             t5:h1p           0.698E+07  1.00                                            
 6    6     8.27     2.88  a6:h8             a6:h2d           0.369E+08  1.00                                            
 7    8     8.27     5.05  a6:h8             a6:h3p           0.708E+07  1.00                                            
 8    4     8.27     4.09  a6:h8             a6:h5p           0.453E+07  1.00            
The first column is the database item number, the second is the peak number,
the third and fourth are the chemical shifts for D1 and D2 in ppm, the fifth
and sixth are the assignments for D1 and D2.

The seventh is the volume which needs to be combined with the above file
externally from felix if you are using version 2.3.  This can be done by
measuring and writing out the volumes using felix (resulting file called
vol.txt in the example below) and using the unix command "join" to join the
volume file with the 6-column file generated as described above. You would
have to do some sorting before and after the join command.

The eighth column in the format is a customized field that we at Scripps
have added to the entity to use as a comment field.  You will not have this
field unless you have customized the felix database in a similar manner. It
is not necessary for the program to work.

This format was created by felix 2.1 in the write volumes routine.  With
version 2.3, you need to use several steps to duplicate this file.  First,
draw your whole spectrum to the screen and make your assigned peak entity
the current entity.  Then go the the list menu and choose "Display" for your
list contents.  This prompts Felix to make a list of the crosspeaks on your
display.  Then choose "Write" under list action on the same menu.  This
brings up a dialog box.  Set peak centers to "on", peak widths to "off",
peak names to "on", and display units to "ppm".  The resulting file will be
the first 6 columns of the above format (called 6-col.txt in the example
below).

Assuming you are using Felix version 2.3 and you have created 6-col.txt and
vol.txt in the manner described above, the whole thing might look like:

1. get rid of the first 2 lines in 6-col.txt and vol.txt

2. execute the following commands:

	sort -bd +1 6-col.txt > junk1
	sort -bd +0 vol.txt > junk2
	join -j1 2 -j2 1 junk1 junk2 > junk3
	sort +1n junk3 > file.txt
	rm junk?
	awk -f felix2amber.awk file.txt > 7col.txt

3. Convert the volumes to distances by your preferred method at anytime
during or after the above process.  The resulting file 7col.txt can be used
directly by makeRST.

The file 7col.txt has 3 columns for each of the two atoms and a seventh for
the volume or distance.  It also contains a "#" followed by the peak number
as an eight column.  This is done because in certain versions of makeRST,
the peak number gets dragged along as a comment for easy reference back to
the NMR spectra.


One last note.  This awk script can also parse overlapped peaks.  If you
draw one box around the whole overlapped peak, and name the overlapped
dimension like: 

a6:h3p+a7:h3p

that single peak will get parsed into two restraints.

The awk script begins here:
CUT HERE________________________CUT HERE________________________CUT HERE_____
 
# felix2amber.awk
# Jarrod Smith		jsmith@scripps.edu
# For converting felix output into 7 column format.
# Parses Felix assignments from the form of C10:H2P
# (where C=1 letter residue name, 10 is the residue number, and
# H2P is the atom name) to the form:
# 10	C    H2P

BEGIN{integer="^[0-9]+$"}
$1 !~integer {next}
/null/ {next}
check5 = 0
check6 = 0

# If $5 is an overlapped peak (contains two assignments separated by a "+")
# do the following parse
$5 ~ /\+/ {
check5 = 1
assignl1=""
assignr1=""
sep1=1
while (substr($5,sep1,1) != "\+" )
	{assignl1 = assignl1 substr($5,sep1,1)
	 sep1++}
sep1++
while (substr($5,sep1,1) != "" )
        {assignr1 = assignr1 substr($5,sep1,1)
         sep1++ }
{resnuml1 = ""
 sep1=2
 while (substr(assignl1,sep1,1) != ":")
 {resnuml1 = resnuml1 substr(assignl1,sep1,1)
  sep1++}
{atnamel1 = substr(assignl1,sep1+1,5)}
}
{resnumr1 = ""
 sep1=2
 while (substr(assignr1,sep1,1) != ":")
 {resnumr1 = resnumr1 substr(assignr1,sep1,1)
  sep1++}
 {atnamer1 = substr(assignr1,sep1+1,5)}
}
# Convert one-letter residue code to AMBER residue names
  {if (((substr(assignl1,1,1) ~ /g/) == 1) || ((substr(assignl1,1,1) ~ /G/) == 1))
	resnamel1 = "GUA"}
  {if (((substr(assignl1,1,1) ~ /c/) == 1) || ((substr(assignl1,1,1) ~ /C/) == 1))
	resnamel1 = "CYT"}
  {if (((substr(assignl1,1,1) ~ /a/) == 1) || ((substr(assignl1,1,1) ~ /A/) == 1))
	resnamel1 = "ADE"}
  {if (((substr(assignl1,1,1) ~ /t/) == 1) || ((substr(assignl1,1,1) ~ /T/) == 1))
	resnamel1 = "THY"}
  {if (((substr(assignr1,1,1) ~ /g/) == 1) || ((substr(assignr1,1,1) ~ /G/) == 1))
	resnamer1 = "GUA"}
  {if (((substr(assignr1,1,1) ~ /c/) == 1) || ((substr(assignr1,1,1) ~ /C/) == 1))
	resnamer1 = "CYT"}
  {if (((substr(assignr1,1,1) ~ /a/) == 1) || ((substr(assignr1,1,1) ~ /A/) == 1))
	resnamer1 = "ADE"}
  {if (((substr(assignr1,1,1) ~ /t/) == 1) || ((substr(assignr1,1,1) ~ /T/) == 1))
	resnamer1 = "THY"}

}

# If $6 is an overlapped peak (contains two assignments separated by a "+")
# do the following parse
$6 ~ /\+/ {
check6 = 1
assignl2=""
assignr2=""
sep2=1        
while (substr($6,sep2,1) != "\+" )
        {assignl2 = assignl2 substr($6,sep2,1)
         sep2++}
sep2++
while (substr($6,sep2,1) != "" )
        {assignr2 = assignr2 substr($6,sep2,1)
         sep2++}
{resnuml2 = ""
 sep2=2
 while (substr(assignl2,sep2,1) != ":")
 {resnuml2 = resnuml2 substr(assignl2,sep2,1)
  sep2++}
{atnamel2 = substr(assignl2,sep2+1,5)}
}
{resnumr2 = ""
 sep2=2
 while (substr(assignr2,sep2,1) != ":")
 {resnumr2 = resnumr2 substr(assignr2,sep2,1)
  sep2++}
{atnamer2 = substr(assignr2,sep2+1,5)}
}
# Convert one-letter residue code to AMBER residue names
  {if (((substr(assignl2,1,1) ~ /g/) == 1) || ((substr(assignl2,1,1) ~ /G/) == 1))
	resnamel2 = "GUA"}
  {if (((substr(assignl2,1,1) ~ /c/) == 1) || ((substr(assignl2,1,1) ~ /C/) == 1))
	resnamel2 = "CYT"}
  {if (((substr(assignl2,1,1) ~ /a/) == 1) || ((substr(assignl2,1,1) ~ /A/) == 1))
	resnamel2 = "ADE"}
  {if (((substr(assignl2,1,1) ~ /t/) == 1) || ((substr(assignl2,1,1) ~ /T/) == 1))
	resnamel2 = "THY"}
  {if (((substr(assignr2,1,1) ~ /g/) == 1) || ((substr(assignr2,1,1) ~ /G/) == 1))
	resnamer2 = "GUA"}
  {if (((substr(assignr2,1,1) ~ /c/) == 1) || ((substr(assignr2,1,1) ~ /C/) == 1))
	resnamer2 = "CYT"}
  {if (((substr(assignr2,1,1) ~ /a/) == 1) || ((substr(assignr2,1,1) ~ /A/) == 1))
	resnamer2 = "ADE"}
  {if (((substr(assignr2,1,1) ~ /t/) == 1) || ((substr(assignr2,1,1) ~ /T/) == 1))
	resnamer2 = "THY"}
}

# $5 is not overlapped do the following parse
{
if (check5 == 0) 
{resnum1 = ""
 sep1=2
 while (substr($5,sep1,1) != ":")
 {resnum1 = resnum1 substr($5,sep1,1)
  sep1++}
{atname1 = substr($5,sep1+1,5)}
}
  {if (((substr($5,1,1) ~ /g/) == 1) || ((substr($5,1,1) ~ /G/) == 1))
	resname1 = "GUA"}
  {if (((substr($5,1,1) ~ /c/) == 1) || ((substr($5,1,1) ~ /C/) == 1))
	resname1 = "CYT"}
  {if (((substr($5,1,1) ~ /a/) == 1) || ((substr($5,1,1) ~ /A/) == 1))
	resname1 = "ADE"}
  {if (((substr($5,1,1) ~ /t/) == 1) || ((substr($5,1,1) ~ /T/) == 1))
	resname1 = "THY"}
}

# $6 is not overlapped do the following parse
{
if (check6 == 0)
{resnum2 = ""
 sep2=2
 while (substr($6,sep2,1) != ":")
 {resnum2 = resnum2 substr ($6,sep2,1)
  sep2 += 1}
{atname2 = substr($6,sep2+1,5)}
}
# Convert one letter codes to AMBER residue names
  {if (((substr($6,1,1) ~ /g/) == 1) || ((substr($6,1,1) ~ /G/) == 1))
	resname2 = "GUA"}
  {if (((substr($6,1,1) ~ /c/) == 1) || ((substr($6,1,1) ~ /C/) == 1))
	resname2 = "CYT"}
  {if (((substr($6,1,1) ~ /a/) == 1) || ((substr($6,1,1) ~ /A/) == 1))
	resname2 = "ADE"}
  {if (((substr($6,1,1) ~ /t/) == 1) || ((substr($6,1,1) ~ /T/) == 1))
	resname2 = "THY"}
}

# if the volume is 0 or smaller, give it some threshold value, else
# put the volume into the variable "vol"
{if ($7 > 0)
	vol=$7
 else
	vol=1.0e+5
}

# Use only peaks on one side of the diagonal (upper half) but use diagonal peaks
{if (($3 > $4) || ($8 == "diagonal_peak")){
	{if ( (check5 == 0) && (check6 == 0) ){
		printf ("%4d   %-6s%-8s%4d   %-6s%-8s  %10.2e #%-4s  %-48s\n",resnum1,\
		resname1,atname1,resnum2,resname2,atname2,vol,$2,$8)}
	}
	{if ( (check5 == 0) && (check6 == 1) ){
		printf ("%4d   %-6s%-8s%4d   %-6s%-8s  %10.2e #%-4s  %-48s\n",resnum1,\
		resname1,atname1,resnuml2,resnamel2,atnamel2,1.0e+5,$2,$8)
		printf ("%4d   %-6s%-8s%4d   %-6s%-8s  %10.2e #%-4s  %-48s\n",resnum1,\
		resname1,atname1,resnumr2,resnamer2,atnamer2,1.0e+5,$2,$8)}
	}
	{if ( (check5 == 1) && (check6 == 0) ){
		printf ("%4d   %-6s%-8s%4d   %-6s%-8s  %10.2e #%-4s  %-48s\n",resnuml1,\
		resnamel1,atnamel1,resnum2,resname2,atname2,1.0e+5,$2,$8)
		printf ("%4d   %-6s%-8s%4d   %-6s%-8s  %10.2e #%-4s  %-48s\n",resnumr1,\
		resnamer1,atnamer1,resnum2,resname2,atname2,1.0e+5,$2,$8)}
	}
	{if ( (check5 == 1) && (check6 == 1) ){
		printf ("%4d   %-6s%-8s%4d   %-6s%-8s  %10.2e #%-4s  %-48s\n",resnuml1,\
		resnamel1,atnamel1,resnuml2,resnamel2,atnamel2,1.0e+5,$2,$8)
		printf ("%4d   %-6s%-8s%4d   %-6s%-8s  %10.2e #%-4s  %-48s\n",resnumr1,\
		resnamer1,atnamer1,resnumr2,resnamer2,atnamer2,1.0e+5,$2,$8)}
	}
	}
}

