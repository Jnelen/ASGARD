#!/bin/csh -f
#TEST-PROGRAM sander
#TEST-DESCRIP TO_BE_DEtermined
#TEST-PURPOSE regression, basic
#TEST-STATE   undocumented

if( ! $?TESTsander ) set TESTsander = "../../bin/sander"

if( ! $?DO_PARALLEL ) then
        setenv DO_PARALLEL " "
else
    echo "This test not set up for parallel"
    echo " cannot run in parallel with #residues < #pes"
    echo "=============================================================="
    exit 0
endif

cat > dock.in.lmod <<EOF
 input for sander8 for vancomycin lmod docking
 &cntrl
   cut    = 99.0,     
   ntx    = 1,     
   irest  = 0,  
   ipol   = 0,
   ntb    = 0,       
   igb    = 0,
   imin   = 1,  
   maxcyc = 5000, 
   ntmin  = 4,  
   drms   = 0.2,
   scee   = 1.2, 
   ntpr   = 1,
   ntr    = 1,
   ntrx   = 1,
   restraint_wt = 100.0,
   restraintmask = '@1,2,3,4,5,6'
 /
 &lmod
   conflib_size = 10,
   number_lmod_iterations = 5,
   total_low_modes = 10,
   explored_low_modes = 2,

   number_free_rotrans_modes =  0,
   energy_window = 50.0,
   lmod_minimize_grms = 0.1,

   arnoldi_dimension = 0,
   matrix_vector_product_method = 'forward',
   frequency_eigenvector_recalc = 6,

   lmod_restart_frequency = 6,
   restart_pool_size = 1,

   number_lmod_moves = 3,
   lmod_step_size_max = 5.0,
   lmod_step_size_min = 2.0,
   lmod_relax_grms    = 1.0,

   Monte_Carlo_method = 'Total_Quench',
   rtemperature = 1.5,

   number_ligands = 1,
   ligstart_list = '[137]',
   ligend_list = '[163]',
   ligcent_list = '[0]',
   rotmin_list = '[30]',
   rotmax_list = '[180]',
   trmin_list = '[0.1]',
   trmax_list = '[1.0]',

   frequency_ligand_rotrans = 1,
   number_ligand_rotrans = 5,

   conflib_filename = 'vancomycin_lmod_dock_conflib',
   lmod_trajectory_filename = 'vancomycin_lmod_dock_trajectory',
   lmod_job_title = 'vancomycin lmod-dock test job',    

   lmod_verbosity = 2,

   random_seed = 314159,

   lbfgs_memory_depth = 3,
   xmin_method = 'LBFGS',
   xmin_verbosity = 0
 /
EOF

set output = sander.vancomycin_lmod_dock
set lmodoutput = lmod_vancomycin_lmod_dock.out

touch dummy
$DO_PARALLEL $TESTsander -O -i dock.in.lmod -o $output < dummy >& $lmodoutput \
    || goto error

# ../dacdif $output.save $output
../dacdif $lmodoutput.save $lmodoutput
exit(0)

error:
echo "  ${0}:  Program error"
exit(1)

